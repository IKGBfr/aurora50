#!/usr/bin/env node

/**
 * Script pour appliquer les corrections des vues salons dans Supabase
 * Cela permettra d'afficher les images de couverture des salons
 */

import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finis dans .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function applySQLFile(filePath: string) {
  try {
    console.log(`üìÑ Lecture du fichier SQL: ${filePath}`);
    const sql = fs.readFileSync(filePath, 'utf8');
    
    console.log('üöÄ Ex√©cution du script SQL...');
    const { error } = await supabase.rpc('exec_sql', { sql_query: sql });
    
    if (error) {
      // Si la fonction exec_sql n'existe pas, essayer d'ex√©cuter directement
      console.log('‚ö†Ô∏è  Fonction exec_sql non trouv√©e, ex√©cution directe...');
      
      // Diviser le SQL en statements individuels
      const statements = sql
        .split(';')
        .map(s => s.trim())
        .filter(s => s.length > 0 && !s.startsWith('--'));
      
      for (const statement of statements) {
        if (statement.includes('DROP VIEW') || 
            statement.includes('CREATE OR REPLACE VIEW') ||
            statement.includes('GRANT') ||
            statement.includes('DO $$')) {
          console.log(`Ex√©cution: ${statement.substring(0, 50)}...`);
          // Note: Ces op√©rations n√©cessitent des privil√®ges admin
          // Elles doivent √™tre ex√©cut√©es directement dans Supabase Dashboard
        }
      }
      
      console.log('‚ö†Ô∏è  Certaines op√©rations n√©cessitent des privil√®ges admin.');
      console.log('üìù Veuillez ex√©cuter le script suivant dans Supabase SQL Editor:');
      console.log('\n' + sql);
      return false;
    }
    
    console.log('‚úÖ Script SQL appliqu√© avec succ√®s');
    return true;
  } catch (err) {
    console.error('‚ùå Erreur lors de l\'application du script SQL:', err);
    return false;
  }
}

async function main() {
  console.log('üîß Application des corrections pour les vues salons...\n');
  
  const sqlFile = path.join(__dirname, 'fix-salons-view-cover.sql');
  
  if (!fs.existsSync(sqlFile)) {
    console.error(`‚ùå Fichier SQL non trouv√©: ${sqlFile}`);
    process.exit(1);
  }
  
  const success = await applySQLFile(sqlFile);
  
  if (!success) {
    console.log('\n‚ö†Ô∏è  Le script n\'a pas pu √™tre appliqu√© automatiquement.');
    console.log('üëâ Veuillez copier le contenu du fichier scripts/fix-salons-view-cover.sql');
    console.log('   et l\'ex√©cuter dans l\'√©diteur SQL de Supabase Dashboard.');
    console.log('\nüìç √âtapes:');
    console.log('   1. Allez sur https://app.supabase.com');
    console.log('   2. S√©lectionnez votre projet');
    console.log('   3. Allez dans SQL Editor');
    console.log('   4. Collez et ex√©cutez le script');
  } else {
    console.log('\n‚úÖ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s!');
    console.log('üéâ Les images de couverture des salons devraient maintenant s\'afficher correctement.');
  }
  
  // V√©rifier si les colonnes existent
  console.log('\nüîç V√©rification des colonnes dans la table salons...');
  
  const { data: columns, error: columnsError } = await supabase
    .from('salons')
    .select('cover_url, emoji, theme_color, tags, visibility')
    .limit(1);
  
  if (columnsError) {
    console.log('‚ö†Ô∏è  Impossible de v√©rifier les colonnes:', columnsError.message);
    console.log('   Assurez-vous d\'avoir ex√©cut√© le script update-salons-schema.sql d\'abord.');
  } else {
    console.log('‚úÖ Les colonnes n√©cessaires sont pr√©sentes dans la table salons');
  }
}

main().catch(console.error);
