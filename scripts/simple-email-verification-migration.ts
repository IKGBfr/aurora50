import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import { join } from 'path'

// Charger les variables d'environnement
dotenv.config({ path: join(__dirname, '..', '.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  db: {
    schema: 'public'
  },
  auth: {
    persistSession: false
  }
})

async function applyMigration() {
  console.log('üöÄ Application de la migration pour la v√©rification email custom...')
  
  try {
    // Test si les colonnes existent d√©j√†
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1)
      .single()
    
    if (testError && testError.code !== 'PGRST116') {
      console.log('‚ö†Ô∏è  Table profiles existe, v√©rification des colonnes...')
    }
    
    // Pour l'instant, nous allons simplement documenter ce qui doit √™tre fait
    console.log('\nüìã Migration SQL √† ex√©cuter dans Supabase Dashboard:')
    console.log('================================================')
    console.log(`
-- Ajouter les colonnes de v√©rification email custom
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS email_verification_token TEXT,
ADD COLUMN IF NOT EXISTS email_verified_at TIMESTAMPTZ;

-- Cr√©er un index pour am√©liorer les performances
CREATE INDEX IF NOT EXISTS idx_profiles_email_verification_token 
ON profiles(email_verification_token) 
WHERE email_verification_token IS NOT NULL;
    `)
    console.log('================================================')
    console.log('\n‚úÖ Copiez et ex√©cutez ce SQL dans:')
    console.log('   1. Supabase Dashboard > SQL Editor')
    console.log('   2. Ou utilisez: npx supabase db push')
    
    // Essayons de v√©rifier si nous pouvons au moins lire la table
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email')
      .limit(1)
    
    if (!profilesError) {
      console.log('\n‚úÖ Connexion √† Supabase r√©ussie')
      console.log('üìä Table profiles accessible')
    } else {
      console.log('\n‚ö†Ô∏è  Erreur de connexion:', profilesError.message)
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    process.exit(1)
  }
}

// Ex√©cuter la migration
applyMigration()
