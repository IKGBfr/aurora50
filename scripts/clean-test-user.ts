#!/usr/bin/env tsx
/**
 * Script de nettoyage pour supprimer les donn√©es de test
 * Utilisateur : altoweb.fr@gmail.com
 */

import { createClient } from '@supabase/supabase-js';
import * as readline from 'readline';

// Configuration Supabase avec service role key
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finis dans .env.local');
  process.exit(1);
}

// Client Supabase avec service role (bypass RLS)
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Email de l'utilisateur test
const TEST_USER_EMAIL = 'altoweb.fr@gmail.com';

// Interface pour readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askConfirmation(): Promise<boolean> {
  return new Promise((resolve) => {
    rl.question('‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer toutes les donn√©es de test ? (oui/non): ', (answer) => {
      resolve(answer.toLowerCase() === 'oui' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'o' || answer.toLowerCase() === 'y');
    });
  });
}

async function cleanTestUser() {
  console.log('üßπ Script de nettoyage des donn√©es de test');
  console.log('================================================');
  console.log('Utilisateur concern√©:', TEST_USER_EMAIL);
  console.log('');
  console.log('‚ö†Ô∏è  ATTENTION: Cette action va supprimer:');
  console.log('   - Les statistiques de l\'utilisateur');
  console.log('   - Les achievements');
  console.log('   - Les activit√©s r√©centes');
  console.log('   - Les cours en cours');
  console.log('   - L\'historique de progression');
  console.log('');

  const confirmed = await askConfirmation();
  
  if (!confirmed) {
    console.log('‚ùå Nettoyage annul√©');
    rl.close();
    process.exit(0);
  }

  console.log('');
  console.log('üöÄ D√©but du nettoyage...');
  console.log('');

  try {
    // 1. R√©cup√©rer l'ID de l'utilisateur
    console.log('üìã √âtape 1: R√©cup√©ration de l\'utilisateur...');
    const { data: users, error: userError } = await supabase
      .from('profiles')
      .select('id, email, full_name')
      .eq('email', TEST_USER_EMAIL)
      .single();

    if (userError || !users) {
      console.error('‚ùå Utilisateur non trouv√©:', userError);
      rl.close();
      process.exit(1);
    }

    const userId = users.id;
    console.log('‚úÖ Utilisateur trouv√©:', users.full_name || users.email);
    console.log('   ID:', userId);
    console.log('');

    // 2. Supprimer les statistiques
    console.log('üìã √âtape 2: Suppression des statistiques...');
    const { error: statsError, count: statsCount } = await supabase
      .from('user_stats')
      .delete()
      .eq('user_id', userId);

    if (statsError) {
      console.error('‚ö†Ô∏è  Erreur lors de la suppression des stats:', statsError);
    } else {
      console.log(`‚úÖ ${statsCount || 0} ligne(s) de statistiques supprim√©e(s)`);
    }

    // 3. Supprimer les achievements
    console.log('üìã √âtape 3: Suppression des achievements...');
    const { error: achievementsError, count: achievementsCount } = await supabase
      .from('user_achievements')
      .delete()
      .eq('user_id', userId);

    if (achievementsError) {
      console.error('‚ö†Ô∏è  Erreur lors de la suppression des achievements:', achievementsError);
    } else {
      console.log(`‚úÖ ${achievementsCount || 0} achievement(s) supprim√©(s)`);
    }

    // 4. Supprimer les activit√©s
    console.log('üìã √âtape 4: Suppression des activit√©s...');
    const { error: activitiesError, count: activitiesCount } = await supabase
      .from('user_activities')
      .delete()
      .eq('user_id', userId);

    if (activitiesError) {
      console.error('‚ö†Ô∏è  Erreur lors de la suppression des activit√©s:', activitiesError);
    } else {
      console.log(`‚úÖ ${activitiesCount || 0} activit√©(s) supprim√©e(s)`);
    }

    // 5. Supprimer les cours
    console.log('üìã √âtape 5: Suppression des cours...');
    const { error: coursesError, count: coursesCount } = await supabase
      .from('user_courses')
      .delete()
      .eq('user_id', userId);

    if (coursesError) {
      console.error('‚ö†Ô∏è  Erreur lors de la suppression des cours:', coursesError);
    } else {
      console.log(`‚úÖ ${coursesCount || 0} cours supprim√©(s)`);
    }

    // 6. Supprimer l'historique de progression
    console.log('üìã √âtape 6: Suppression de l\'historique de progression...');
    const { error: historyError, count: historyCount } = await supabase
      .from('user_progress_history')
      .delete()
      .eq('user_id', userId);

    if (historyError) {
      console.error('‚ö†Ô∏è  Erreur lors de la suppression de l\'historique:', historyError);
    } else {
      console.log(`‚úÖ ${historyCount || 0} jour(s) d\'historique supprim√©(s)`);
    }

    // 7. R√©initialiser le profil (optionnel)
    console.log('üìã √âtape 7: R√©initialisation du profil...');
    const { error: profileError } = await supabase
      .from('profiles')
      .update({
        bio: null,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (profileError) {
      console.error('‚ö†Ô∏è  Erreur lors de la r√©initialisation du profil:', profileError);
    } else {
      console.log('‚úÖ Profil r√©initialis√©');
    }

    console.log('');
    console.log('================================================');
    console.log('üéâ Nettoyage termin√© avec succ√®s !');
    console.log('');
    console.log('üìä R√©sum√©:');
    console.log('   - Toutes les donn√©es de test ont √©t√© supprim√©es');
    console.log('   - Le profil a √©t√© r√©initialis√©');
    console.log('   - L\'utilisateur', TEST_USER_EMAIL, 'est pr√™t pour un nouveau seed');
    console.log('');
    console.log('üí° Pour recr√©er les donn√©es, ex√©cutez: npm run seed:test');
    console.log('================================================');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    rl.close();
    process.exit(1);
  }

  rl.close();
}

// Ex√©cution
cleanTestUser().catch(console.error);
