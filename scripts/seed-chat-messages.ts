import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { resolve } from 'path';

// Charger les variables d'environnement
dotenv.config({ path: resolve(__dirname, '../.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

// Client Supabase avec service role key
const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Messages de chat r√©alistes
const CHAT_MESSAGES = [
  { email: 'marie.dubois@test.aurora50.com', content: 'Bonjour tout le monde ! Ravie de rejoindre cette belle communaut√© Aurora50 üåø' },
  { email: 'catherine.leroy@test.aurora50.com', content: 'Bienvenue Marie ! Tu vas adorer, l\'ambiance ici est vraiment bienveillante üíö' },
  { email: 'sylvie.martin@test.aurora50.com', content: 'Salut les filles ! Quelqu\'un a commenc√© le module sur le d√©veloppement personnel ?' },
  { email: 'isabelle.moreau@test.aurora50.com', content: 'Oui Sylvie ! C\'est vraiment transformateur. Les exercices de m√©ditation sont top üßò‚Äç‚ôÄÔ∏è' },
  { email: 'philippe.lefebvre@test.aurora50.com', content: 'Hello la team ! Content de voir qu\'il y a aussi des hommes ici üòÑ' },
  { email: 'jeanmarc.thomas@test.aurora50.com', content: 'Salut Philippe ! On est moins nombreux mais on est l√† üí™' },
  { email: 'christine.petit@test.aurora50.com', content: 'J\'ai ador√© l\'atelier cr√©ativit√© d\'hier soir ! Qui √©tait pr√©sent ? üé®' },
  { email: 'nathalie.bernard@test.aurora50.com', content: 'Moi j\'y √©tais Christine ! C\'√©tait vraiment inspirant ‚ú®' },
  { email: 'veronique.durand@test.aurora50.com', content: 'Les filles, j\'ai besoin de vos conseils pour √©quilibrer vie pro et perso... ü§î' },
  { email: 'catherine.leroy@test.aurora50.com', content: 'V√©ronique, on en parle en priv√© si tu veux ! J\'ai quelques astuces qui m\'ont beaucoup aid√©e üå∏' },
  { email: 'brigitte.rousseau@test.aurora50.com', content: 'Cette communaut√© est une vraie p√©pite ! Merci √† toutes et tous üå∫' },
  { email: 'marie.dubois@test.aurora50.com', content: 'Quelqu\'un pour un d√©fi 30 jours de m√©ditation ? On se motive ensemble ! üåø' },
  { email: 'isabelle.moreau@test.aurora50.com', content: 'Je suis partante Marie ! On commence demain ? üßò‚Äç‚ôÄÔ∏è' },
  { email: 'sylvie.martin@test.aurora50.com', content: 'Moi aussi ! Team m√©ditation üí™' },
  { email: 'christine.petit@test.aurora50.com', content: 'J\'organise un atelier cr√©atif en ligne samedi, qui est int√©ress√© ? üé®' },
  { email: 'nathalie.bernard@test.aurora50.com', content: 'Super id√©e Christine ! Je m\'inscris üåü' },
  { email: 'philippe.lefebvre@test.aurora50.com', content: 'Les amis, des conseils pour mieux g√©rer le stress au travail ?' },
  { email: 'jeanmarc.thomas@test.aurora50.com', content: 'Philippe, le module sur la gestion du stress est excellent, je te le recommande üèÉ‚Äç‚ôÇÔ∏è' },
  { email: 'veronique.durand@test.aurora50.com', content: 'Merci Catherine pour notre √©change ! Tes conseils sont en or üöÄ' },
  { email: 'brigitte.rousseau@test.aurora50.com', content: 'Bon weekend √† toutes et tous ! Profitez bien üå∫' }
];

async function seedChatMessages() {
  console.log('üí¨ D√©but du seeding des messages de chat...\n');
  
  let successCount = 0;
  let errorCount = 0;

  // R√©cup√©rer les IDs des utilisateurs
  const { data: users, error: fetchError } = await supabase.auth.admin.listUsers();
  
  if (fetchError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', fetchError.message);
    return;
  }

  // Cr√©er une map email -> userId
  const userMap = new Map<string, string>();
  users.users.forEach(user => {
    if (user.email) {
      userMap.set(user.email, user.id);
    }
  });

  // Ins√©rer les messages avec un d√©lai pour simuler une conversation naturelle
  for (let i = 0; i < CHAT_MESSAGES.length; i++) {
    const message = CHAT_MESSAGES[i];
    const userId = userMap.get(message.email);
    
    if (!userId) {
      console.warn(`‚ö†Ô∏è  Utilisateur non trouv√©: ${message.email}`);
      errorCount++;
      continue;
    }

    // Cr√©er un timestamp d√©cal√© pour chaque message
    const createdAt = new Date(Date.now() - (CHAT_MESSAGES.length - i) * 5 * 60 * 1000); // 5 minutes entre chaque message
    
    const { error } = await supabase
      .from('chat_messages')
      .insert({
        user_id: userId,
        content: message.content,
        created_at: createdAt.toISOString()
      });

    if (error) {
      console.error(`‚ùå Erreur pour le message de ${message.email}: ${error.message}`);
      errorCount++;
    } else {
      console.log(`‚úÖ Message de ${message.email.split('@')[0]} ajout√©`);
      successCount++;
    }
  }

  console.log('\n' + '='.repeat(50));
  console.log('üìä R√âSUM√â DU SEEDING CHAT');
  console.log('='.repeat(50));
  console.log(`‚úÖ Succ√®s: ${successCount}/${CHAT_MESSAGES.length} messages`);
  if (errorCount > 0) {
    console.log(`‚ùå Erreurs: ${errorCount}`);
  }
  console.log('\nüí¨ Seeding des messages termin√©!');
}

async function cleanChatMessages() {
  console.log('üßπ Nettoyage des messages de chat...\n');
  
  // R√©cup√©rer les IDs des utilisateurs de test
  const { data: users, error: fetchError } = await supabase.auth.admin.listUsers();
  
  if (fetchError) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', fetchError.message);
    return;
  }

  // Filtrer les utilisateurs de test
  const testUserIds = users.users
    .filter(u => u.email?.endsWith('@test.aurora50.com'))
    .map(u => u.id);

  if (testUserIds.length === 0) {
    console.log('‚ö†Ô∏è  Aucun utilisateur de test trouv√©');
    return;
  }

  // Supprimer les messages de ces utilisateurs
  const { error, count } = await supabase
    .from('chat_messages')
    .delete()
    .in('user_id', testUserIds);

  if (error) {
    console.error('‚ùå Erreur lors de la suppression:', error.message);
  } else {
    console.log(`‚úÖ ${count || 0} messages supprim√©s`);
  }
  
  console.log('\nüßπ Nettoyage termin√©!');
}

// Fonction principale
async function main() {
  const command = process.argv[2];
  
  if (command === 'seed') {
    await seedChatMessages();
  } else if (command === 'clean') {
    await cleanChatMessages();
  } else {
    console.log('Usage:');
    console.log('  npm run seed:chat    # Cr√©er les messages de chat');
    console.log('  npm run clean:chat   # Supprimer les messages de chat');
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch(console.error);
}

export { seedChatMessages, cleanChatMessages };
